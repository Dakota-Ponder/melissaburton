// library that detects the browser and OS details

var browser = (function () {
  "use strict"; // for safer js
  var t = {
    name: null, // browser name
    version: null, // browser version
    os: null, // os name
    osVersion: null, // os version
    touch: null, // touch support
    mobile: null, // mobile device
    _canUse: null, // util property for the canUse function

    // function that checks if a CSS property/value is supported by the browser
    canUse: function (e) {
      t._canUse || (t._canUse = document.createElement("div"));
      var n = t._canUse.style,
        r = e.charAt(0).toUpperCase() + e.slice(1);
      return (
        e in n ||
        "Moz" + r in n ||
        "Webkit" + r in n ||
        "O" + r in n ||
        "ms" + r in n
      );
    },

    // initialization function that determines the browser and os details
    init: function () {
      for (
        // get the user agent string of the browser
        var e = navigator.userAgent,
          // set to other by default
          n = "other",
          // browser version, set to 0 by default
          r = 0,
          // define a list of browser names and their corresponding regex
          i = [
            ["firefox", /Firefox\/([0-9\.]+)/],
            ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
            ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
            ["opera", /OPR\/([0-9\.]+)/],
            ["opera", /Opera\/([0-9\.]+)/],
            ["edge", /Edge\/([0-9\.]+)/],
            ["safari", /Version\/([0-9\.]+).+Safari/],
            ["chrome", /Chrome\/([0-9\.]+)/],
            ["ie", /MSIE ([0-9]+)/],
            ["ie", /Trident\/.+rv:([0-9]+)/],
          ],
          // go through each item in the list for os detection
          o = 0;
        o < i.length;
        o++
      )
        // check if the user agent string matches the regex of the current OS
        if (e.match(i[o][1])) {
          // set n to the name of the OS from the current i item
          (n = i[o][0]),
            // parse the OS version and set version num to r
            (r = parseFloat(RegExp.$1));

          // stop looping since we found a match
          break;
        }

      // loop through the list of OS names and their corresponding regex
      for (
        // define a list of OS names and their corresponding regex
        t.name = n,
          // set the browser version to 0 by default
          t.version = r,
          // set the OS to other by default
          n = "other",
          // i is the list of OS names and their corresponding regex
          i = [
            [
              "ios",
              /([0-9_]+) like Mac OS X/,

              // function that replaces underscores with dots in the OS version
              // and returns the OS version
              function (e) {
                return e.replace("_", ".").replace("_", "");
              },
            ],
            [
              "ios",
              /CPU like Mac OS X/,

              // function that returns 0 for the OS version
              // since the OS version is not available
              function (e) {
                return 0;
              },
            ],
            ["wp", /Windows Phone ([0-9\.]+)/, null],
            ["android", /Android ([0-9\.]+)/, null],
            [
              "mac",
              /Macintosh.+Mac OS X ([0-9_]+)/,

              // function that replaces underscores with dots in the OS version
              function (e) {
                return e.replace("_", ".").replace("_", "");
              },
            ],
            ["windows", /Windows NT ([0-9\.]+)/, null],
            ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
            ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
            ["linux", /Linux/, null],
            ["bsd", /BSD/, null],
            ["unix", /X11/, null],
          ],
          // loop through the list of OS names and their corresponding regex
          o = r = 0;
        o < i.length;
        o++
      )
        // check if the user agent string matches the regex of the current OS
        if (e.match(i[o][1])) {
          (n = i[o][0]),
            // if the current OS has a corresponding function, run it
            (r = parseFloat(i[o][2] ? i[o][2](RegExp.$1) : RegExp.$1));
          break; // stop looping since we found a match
        }

      // if the OS is mac and the device supports touch
      "mac" == n &&
        "ontouchstart" in window &&
        ((1024 == screen.width && 1366 == screen.height) ||
          (834 == screen.width && 1112 == screen.height) ||
          (810 == screen.width && 1080 == screen.height) ||
          (768 == screen.width && 1024 == screen.height)) &&
        (n = "ios"),
        (t.os = n),
        (t.osVersion = r),
        (t.touch =
          "wp" == t.os
            ? 0 < navigator.msMaxTouchPoints
            : !!("ontouchstart" in window)),
        (t.mobile =
          "wp" == t.os || "android" == t.os || "ios" == t.os || "bb" == t.os);
    },
  };
  return t.init(), t;
})();

// export the browser object as a module
!(function (e, n) {
  "function" == typeof define && define.amd
    ? define([], n)
    : "object" == typeof exports
    ? (module.exports = n())
    : (e.browser = n());
})(this, function () {
  return browser;
});
